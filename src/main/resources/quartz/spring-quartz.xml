<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">

    <!--=========================Timer 定时器配置=========================-->
    <bean name="ramQuartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!--<property name="dataSource" ref="dataSource"/>
        <property name="applicationContextSchedulerContextKey" value="applicationContextKey"/>
        <property name="configLocation" value="classpath:quartz.properties"/>-->
        <!--指定使用哪些触发器，spring会去调度触发相应的触发器，进而对作业任务进行调度处理-->
        <property name="triggers">
            <list>
                <ref bean="cronTrigger"/>
                <ref bean="simpleTrigger"/>
            </list>
        </property>
    </bean>

    <bean id="testJob1" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <!--
            参考源码，我们可以看到属性jobClass为Class类型，所以不能使用ref来引用一个bean，否则就会因为不能将bean转换为Class类型而出现异常。
            <property name="jobClass" ref="simpleJob"/>
            必须使用value对jobClass赋值。
            <property name="jobClass" value="com.earl.quartz.spring.job.SimpleJob"/>
        -->
        <!-- 指定job的名称不能重复，否则按顺序执行第一个，哪怕你指定了jobClass -->
        <property name="name" value="test_job"/>
        <!-- 指定job的分组 -->
        <property name="group" value="test_group"/>
        <!-- 指定具体的job类 -->
        <property name="jobClass" value="com.xiaomingbudushu.erp.module.sys.job.CronJob1"/>
        <!-- 必须设置为true，如果为false，当没有活动的触发器与之关联时会在调度器中会删除该任务  -->
        <property name="durability" value="true"/>
    </bean>

    <bean id="testJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <!--
            参考源码，我们可以看到属性jobClass为Class类型，所以不能使用ref来引用一个bean，否则就会因为不能将bean转换为Class类型而出现异常。
            <property name="jobClass" ref="simpleJob"/>
            必须使用value对jobClass赋值。
            <property name="jobClass" value="com.earl.quartz.spring.job.SimpleJob"/>
        -->
        <!-- 指定job的名称 -->
        <property name="name" value="test_job"/>
        <!-- 指定job的分组 -->
        <property name="group" value="test_group"/>
        <!-- 指定具体的job类 -->
        <property name="jobClass" value="com.xiaomingbudushu.erp.module.sys.job.SimpleJob"/>
        <!-- 必须设置为true，如果为false，当没有活动的触发器与之关联时会在调度器中会删除该任务  -->
        <property name="durability" value="true"/>
        <!-- 这里设置的jobDataAsMap可以传递一些参数给作业任务 -->
        <property name="jobDataAsMap">
            <map>
                <entry key="test" value="hello"/>
            </map>
        </property>
    </bean>




    <!--
    如果两个触发器触发同一个作业，那么第二个作业可能在第一个作业完成之前被触发。
    将作业类实现StatefulJob接口就可以避免这种情况。
    将concurrent设置为false可以避免并发的发生。
-->
    <!-- 使用MethodInvokingJobDetailFactoryBean来创建作业对象 -->
    <!--
    <bean id="exampleJob" class="com.xiaomingbudushu.erp.module.sys.job.CronJob"/>
    <bean id="methodInvokingJobDetailFactoryBeanExample" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        &lt;!&ndash; 目标对象，指的是作业任务的实现类 &ndash;&gt;
        <property name="targetObject" ref="exampleJob"/>
        &lt;!&ndash; 目标方法，指的是指定实现类中的哪个方法作为调度时的执行方法 &ndash;&gt;
        <property name="targetMethod" value="execute"/>
        &lt;!&ndash; 是否并发 &ndash;&gt;
        <property name="concurrent" value="false"/>
    </bean>
-->
    <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <!--指定Trigger的名称-->
        <property name="name" value="test_trigger"/>
        <!--指定Trigger的名称-->
        <property name="group" value="test_trigger_group"/>
        <!-- 这里的JobDetail指的就是我们配置的作业任务的bean -->
        <property name="jobDetail" ref="testJob"/>
        <!-- 延迟5秒开始 -->
        <property name="startDelay" value="5000"></property>
        <!-- 每3秒重复一次 -->
        <property name="repeatInterval" value="3000"></property>
        <!--指定Trigger的重复次数-->
        <property name="repeatCount" value="5"/>
    </bean>

    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <!-- 指定Trigger的名称 -->
        <property name="name" value="test1_trigger"/>
        <!-- 指定Trigger的名称 -->
        <property name="group" value="test_trigger_group"/>
        <!-- 这里的JobDetail指的就是我们配置的作业任务的bean -->
        <property name="jobDetail" ref="testJob1" />
        <!--cronExpression，cron表达式-->
        <property name="cronExpression" value="*/1 * * * * ?"/>
    </bean>

</beans>