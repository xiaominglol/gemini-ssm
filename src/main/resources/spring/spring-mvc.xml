<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-4.1.xsd 
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
	
	<!--=========================Spring mvc配置=====================-->
	
	<!-- 
		1、开启SpringMVC注解模式 
		(1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter 
		(2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持 
	-->
	<mvc:annotation-driven />
	
	<!-- 2、Spring mvc配置静态资源，直接映射到对应的文件夹 -->
	<mvc:resources mapping="/static/**" location="/static/" />
	<!-- (待测试)
	<mvc:default-servlet-handler /> -->
	
	
	<!-- 3、自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<!--
		use-default-filters默认为true，
		默认会扫描@Component、@Controller、@Repository、@Service的注解，
		在这里只扫描@Controller注解是因为，SpringMVC的容器没有事务的能力，
		所以扫描@Repository、@Service的注解只能放在Spring的容器。
		也正因为如此，事务的配置要写在Spring的容器。

		可以使用base-package="*"表示全部的类
	 -->
	<context:component-scan base-package="com.gemini.ssm.module" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 4、定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">

		<property name="prefix" value="/view/" />

		<property name="suffix" value=".jsp" />

	</bean>

	<!-- 4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法. -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<!--一定要加这句话，否则注解不生效-->
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<!--后来研究发现，不起作用是因为代码放的位置不对，需要将上面代码放到视图的配置文件中，如：spring-mvc.xml-->
	
	
	<!-- (待测试)避免IE执行AJAX时，返回JSON出现下载文件 要在pom.xml加入FastJackson依赖 -->
	<!-- 注意：Spring 3.x 和4.X处理JSON的一个类不一样 spring3.x是org.springframework.http.converter.json.MappingJacksonHttpMessageConverter 
		spring4.x是org.springframework.http.converter.json.MappingJackson2HttpMessageConverter -->
	<!-- 
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>apolication/json;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
 	-->
	<!-- (待测试)启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<!--
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	-->
	
	<!-- 要启用@Autowired，必须注册AutowiredAnnotationBeanPostProcessor,以下两种方式均可 
	<context:annotation-config />-->

	<!-- <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" 
		/> -->

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
		<!-- 默认编码 
		<property name="defaultEncoding" value="utf-8" />-->
		<!-- 文件大小最大值 
		<property name="maxUploadSize" value="10485760000" />-->
		<!-- 内存中的最大值 
		<property name="maxInMemorySize" value="40960" />
	</bean>-->
</beans>